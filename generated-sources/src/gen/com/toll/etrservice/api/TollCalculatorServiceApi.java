/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.toll.etrservice.api;

import com.toll.etrservice.models.ETRErrorResponse;
import com.toll.etrservice.models.InlineObject;
import com.toll.etrservice.models.TollCalculatorResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-09-10T23:13:29.151519600-04:00[America/Toronto]")

@Validated
@Api(value = "tollCalculatorService", description = "the tollCalculatorService API")
public interface TollCalculatorServiceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Service endpoint to calculate the Toll charge based on Entry & Exit", nickname = "calculateTollDetailsByRoute", notes = "Calculates Toll charge based on Entry & Exit route info", response = TollCalculatorResponse.class, tags={ "ETR", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success response", response = TollCalculatorResponse.class),
        @ApiResponse(code = 400, message = "Bad request - validation errors", response = ETRErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ETRErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/tollCalculatorService/calculateTollCharge",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<TollCalculatorResponse> calculateTollDetailsByRoute(@ApiParam(value = ""  )  @Valid @RequestBody InlineObject inlineObject) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"entry\" : \"entry\",  \"exit\" : \"exit\",  \"charge\" : 6.02745618307040320615897144307382404804229736328125,  \"distance\" : 0.80082819046101150206595775671303272247314453125,  \"error\" : {    \"errcode\" : 1,    \"errMessage\" : \"errMessage\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
